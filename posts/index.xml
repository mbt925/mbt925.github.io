<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Mohsen Biglari</title>
        <link>http://mbt925.github.io/posts/</link>
        <description>All Posts | Mohsen Biglari</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 02 Mar 2024 23:23:25 &#43;0100</lastBuildDate><atom:link href="http://mbt925.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>A handy Kotlin coroutine extension for switching dispatcher</title>
    <link>http://mbt925.github.io/posts/handy_coroutine_dispatcher_extension/</link>
    <pubDate>Sat, 02 Mar 2024 23:23:25 &#43;0100</pubDate>
    <author>Author</author>
    <guid>http://mbt925.github.io/posts/handy_coroutine_dispatcher_extension/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/blog/handy_coroutine_dispatcher_extension.webp" referrerpolicy="no-referrer">
            </div>Imagine you have a suspend function like this:
suspend fun doSomething() = withContext(Dispatchers.IO) { // body } This looks alright. Using withContext every time looks a bit verbose though. There&rsquo;s a nifty Kotlin extension on the invoke function that simplifies the code and makes it cleaner.
1 2 3 4 5 import kotlinx.coroutines.invoke suspend fun doSomething() = Dispatchers.IO { // body } The invoke extension allows you to specify the dispatcher directly within the function call, eliminating the need for withContext.]]></description>
</item></channel>
</rss>
