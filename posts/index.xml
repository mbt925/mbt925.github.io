<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Mohsen Biglari</title>
        <link>http://mbt925.github.io/posts/</link>
        <description>All Posts | Mohsen Biglari</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2024 22:23:53 &#43;0200</lastBuildDate><atom:link href="http://mbt925.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>The domain layer and error handling</title>
    <link>http://mbt925.github.io/posts/error_handling_in_domain_layer/</link>
    <pubDate>Sat, 01 Jun 2024 22:23:53 &#43;0200</pubDate>
    <author>mbt925</author>
    <guid>http://mbt925.github.io/posts/error_handling_in_domain_layer/</guid>
    <description><![CDATA[The domain layer is the heart of your application, where business rules are defined and enforced. One critical aspect of these rules is error handling, which must be as detailed as the business requirements dictate. It&rsquo;s the domain layer that determines the granularity of error handling, ensuring that errors are managed appropriately based on the specific needs of the business.
Let&rsquo;s consider the following example:
1 2 3 4 5 data class Data(val a: Int, val b: Int) interface Repository { fun getData(): Data?]]></description>
</item>
<item>
    <title>Data flow vs. dependency direction</title>
    <link>http://mbt925.github.io/posts/data_flow_vs_dependency_direction/</link>
    <pubDate>Sun, 19 May 2024 18:44:05 &#43;0200</pubDate>
    <author>mbt925</author>
    <guid>http://mbt925.github.io/posts/data_flow_vs_dependency_direction/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/blog/data_flow_vs_dependency_direction.webp" referrerpolicy="no-referrer">
            </div>Imagine you&rsquo;re building a complex application with several layers: a presentation layer for user interactions, a domain layer for business rules, and a data layer for managing data. One common pitfall developers face is confusing data flow direction with dependency direction, often assuming they must be the same. But here’s a crucial question: Can dependency direction differ from data flow direction? Yes, it can, and knowing how is vital for creating a robust architecture.]]></description>
</item>
<item>
    <title>Typealias vs. inline value class</title>
    <link>http://mbt925.github.io/posts/typealias_vs_value_class/</link>
    <pubDate>Tue, 26 Mar 2024 20:28:25 &#43;0100</pubDate>
    <author>mbt925</author>
    <guid>http://mbt925.github.io/posts/typealias_vs_value_class/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/blog/typealias_vs_value_class.webp" referrerpolicy="no-referrer">
            </div>Normally, Typealias and inline value class (which I&rsquo;ll refer to as value class throughout this text) are utilized for different purposes. However, developers might occasionally use one for the other. Let’s explore some examples and clarify the differences.
Typealias kotlinlang.org does a pretty good job explaining Typealias:
Type aliases provide alternative names for existing types. If the type name is too long you can introduce a different shorter name and use the new one instead.]]></description>
</item>
<item>
    <title>A smarter way of testing Coroutines with runTest</title>
    <link>http://mbt925.github.io/posts/runtest_simplified/</link>
    <pubDate>Fri, 08 Mar 2024 23:23:25 &#43;0100</pubDate>
    <author>mbt925</author>
    <guid>http://mbt925.github.io/posts/runtest_simplified/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/blog/runtest_simplified.webp" referrerpolicy="no-referrer">
            </div>Testing coroutine-based code in Kotlin can be challenging due to its asynchronous nature. Fortunately, Kotlin&rsquo;s kotlinx.coroutines library provides helpful utilities for testing, including the runTest function. Let&rsquo;s dive into how to effectively use runTest and streamline coroutine testing in your Kotlin projects.
runTest You&rsquo;re probably used runTest before. Let me quote kotlinlang.org:
Executes testBody as a test in a new coroutine, returning TestResult. On JVM and Native, this function behaves similarly to runBlocking, with the difference that the code that it runs will skip delays.]]></description>
</item>
<item>
    <title>A handy Kotlin coroutine extension for switching dispatcher</title>
    <link>http://mbt925.github.io/posts/handy_coroutine_dispatcher_extension/</link>
    <pubDate>Sat, 02 Mar 2024 23:23:25 &#43;0100</pubDate>
    <author>mbt925</author>
    <guid>http://mbt925.github.io/posts/handy_coroutine_dispatcher_extension/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/blog/handy_coroutine_dispatcher_extension.webp" referrerpolicy="no-referrer">
            </div>Imagine you have a suspend function like this:
1 2 3 suspend fun doSomething() = withContext(Dispatchers.IO) { // body } This looks alright. Using withContext every time looks a bit verbose though. There&rsquo;s a nifty Kotlin extension on the invoke function that simplifies the code and makes it cleaner.
1 2 3 4 5 import kotlinx.coroutines.invoke suspend fun doSomething() = Dispatchers.IO { // body } The invoke extension allows you to specify the dispatcher directly within the function call, eliminating the need for withContext.]]></description>
</item>
</channel>
</rss>
